[
  {
    "objectID": "reference/tdda_commands.html",
    "href": "reference/tdda_commands.html",
    "title": "tdda_commands",
    "section": "",
    "text": "tdda_commands\ncli.tdda_commands()\nUse tdda-specific commands inside kedro project."
  },
  {
    "objectID": "reference/hooks.TddaHooks.html",
    "href": "reference/hooks.TddaHooks.html",
    "title": "hooks.TddaHooks",
    "section": "",
    "text": "hooks.TddaHooks()\n\n\n\n\n\nName\nDescription\n\n\n\n\nafter_context_created\nAfter the KedroContext is created, the config loader is\n\n\nafter_dataset_loaded\nThis dataset hook will run tdda verify on each dataset\n\n\n\n\n\nhooks.TddaHooks.after_context_created(context)\nAfter the KedroContext is created, the config loader is modified to include the pattern tdda. This will load tdda specification that match the regex pattern. Subsequently, constraints specifications are saved for furhter use with dataset hooks.\n\n\n\nhooks.TddaHooks.after_dataset_loaded(dataset_name, data)\nThis dataset hook will run tdda verify on each dataset that has a constraint specification"
  },
  {
    "objectID": "reference/hooks.TddaHooks.html#methods",
    "href": "reference/hooks.TddaHooks.html#methods",
    "title": "hooks.TddaHooks",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nafter_context_created\nAfter the KedroContext is created, the config loader is\n\n\nafter_dataset_loaded\nThis dataset hook will run tdda verify on each dataset\n\n\n\n\n\nhooks.TddaHooks.after_context_created(context)\nAfter the KedroContext is created, the config loader is modified to include the pattern tdda. This will load tdda specification that match the regex pattern. Subsequently, constraints specifications are saved for furhter use with dataset hooks.\n\n\n\nhooks.TddaHooks.after_dataset_loaded(dataset_name, data)\nThis dataset hook will run tdda verify on each dataset that has a constraint specification"
  },
  {
    "objectID": "reference/verify.html",
    "href": "reference/verify.html",
    "title": "verify",
    "section": "",
    "text": "verify\ncli.verify(dataset_name, env)\nThe tdda verify command is used to validate pandas dataframes, against a constraints specification.",
    "crumbs": [
      "CLI commands",
      "verify"
    ]
  },
  {
    "objectID": "reference/discover.html",
    "href": "reference/discover.html",
    "title": "discover",
    "section": "",
    "text": "discover\ncli.discover(dataset_name, env, overwrite)\nThe tdda discover command generates constraints for data, and saves the generated constraints as a yaml file.",
    "crumbs": [
      "CLI commands",
      "discover"
    ]
  },
  {
    "objectID": "reference/cli.detect.html",
    "href": "reference/cli.detect.html",
    "title": "cli.detect",
    "section": "",
    "text": "cli.detect\ncli.detect(dataset_name, env, target_dir)\nThe tdda detect command is used to detect anomalies on data, by checking pandas dataframes against specified constraints."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "kedro-tdda",
    "section": "",
    "text": "This plugin extends kedro with a lightweight data validation tool: tdda. The tdda package enables you to discover constraints from data, validate new data and detect anomalies. Check the tdda website for more info.\nThis kedro plugin is limited to itâ€™s constraints API and alike tdda only supports pandas datasets. The plugin includes a CLI interface and dataset hooks\nFor more extensive needs, please check kedro_pandera\n\n\nYou can install the package like so\npip install git+https://github.com/sinanpl/kedro_tdda\n\n\n\n\n\nThe plugin currently uses the constraints API of tdda. The available commands are\n\ndiscover: infer constraints for a dataset and write to yaml. Constraints are inferred by field. Examples are:\n\ntype: one of int, real, bool, string or date\nmin: minimum allowed value,\nmax: maximum allowed value,\nmin_length: minimum allowed string length (for string fields),\nmax_length: maximum allowed string length (for string fields),\nmax_nulls: maximum number of null values allowed,\nsign: one of positive, negative, non-positive, non-negative,\nno_duplicates: true if the field values must be unique,\nvalues: list of distinct allowed values,\nrex: list of regular expressions, to cover all cases\n\nverify: verify if the dataset - after being updated - respects the constraints.\ndetect: write a csv records file with deviating rows\n\nkedro tdda discover -h\nOptions:\n  -d, --dataset TEXT  The name of the pandas catalog entry for which\n                      constraints be inferred.\n  -e, --env TEXT      The kedro environment where the dataset to retrieve is\n                      available. Default to 'base'\n  -o, --overwrite     Boolean indicator for overwriting an existing tdda\n                      constrains yml specification\n  -h, --help          Show this message and exit.```"
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "kedro-tdda",
    "section": "",
    "text": "You can install the package like so\npip install git+https://github.com/sinanpl/kedro_tdda"
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "kedro-tdda",
    "section": "",
    "text": "The plugin currently uses the constraints API of tdda. The available commands are\n\ndiscover: infer constraints for a dataset and write to yaml. Constraints are inferred by field. Examples are:\n\ntype: one of int, real, bool, string or date\nmin: minimum allowed value,\nmax: maximum allowed value,\nmin_length: minimum allowed string length (for string fields),\nmax_length: maximum allowed string length (for string fields),\nmax_nulls: maximum number of null values allowed,\nsign: one of positive, negative, non-positive, non-negative,\nno_duplicates: true if the field values must be unique,\nvalues: list of distinct allowed values,\nrex: list of regular expressions, to cover all cases\n\nverify: verify if the dataset - after being updated - respects the constraints.\ndetect: write a csv records file with deviating rows\n\nkedro tdda discover -h\nOptions:\n  -d, --dataset TEXT  The name of the pandas catalog entry for which\n                      constraints be inferred.\n  -e, --env TEXT      The kedro environment where the dataset to retrieve is\n                      available. Default to 'base'\n  -o, --overwrite     Boolean indicator for overwriting an existing tdda\n                      constrains yml specification\n  -h, --help          Show this message and exit.```"
  },
  {
    "objectID": "reference/detect.html",
    "href": "reference/detect.html",
    "title": "detect",
    "section": "",
    "text": "detect\ncli.detect(dataset_name, env, target_dir)\nThe tdda detect command is used to detect anomalies on data, by checking pandas dataframes against specified constraints.",
    "crumbs": [
      "CLI commands",
      "detect"
    ]
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Function reference",
    "section": "",
    "text": "discover\nThe tdda discover command generates constraints for data,\n\n\nverify\nThe tdda verify command is used to validate pandas dataframes,\n\n\ndetect\nThe tdda detect command is used to detect anomalies on data,\n\n\n\n\n\n\n\n\n\nTddaHooks",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "reference/index.html#cli-commands",
    "href": "reference/index.html#cli-commands",
    "title": "Function reference",
    "section": "",
    "text": "discover\nThe tdda discover command generates constraints for data,\n\n\nverify\nThe tdda verify command is used to validate pandas dataframes,\n\n\ndetect\nThe tdda detect command is used to detect anomalies on data,",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "reference/index.html#hooks",
    "href": "reference/index.html#hooks",
    "title": "Function reference",
    "section": "",
    "text": "TddaHooks",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "reference/TddaHooks.html",
    "href": "reference/TddaHooks.html",
    "title": "TddaHooks",
    "section": "",
    "text": "hooks.TddaHooks()\n\n\n\n\n\nName\nDescription\n\n\n\n\nafter_context_created\nAfter the KedroContext is created, the config loader is\n\n\nafter_dataset_loaded\nThis dataset hook will run tdda verify on each dataset\n\n\n\n\n\nhooks.TddaHooks.after_context_created(context)\nAfter the KedroContext is created, the config loader is modified to include the pattern tdda. This will load tdda specification that match the regex pattern. Subsequently, constraints specifications are saved for furhter use with dataset hooks.\n\n\n\nhooks.TddaHooks.after_dataset_loaded(dataset_name, data)\nThis dataset hook will run tdda verify on each dataset that has a constraint specification",
    "crumbs": [
      "Hooks",
      "TddaHooks"
    ]
  },
  {
    "objectID": "reference/TddaHooks.html#methods",
    "href": "reference/TddaHooks.html#methods",
    "title": "TddaHooks",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nafter_context_created\nAfter the KedroContext is created, the config loader is\n\n\nafter_dataset_loaded\nThis dataset hook will run tdda verify on each dataset\n\n\n\n\n\nhooks.TddaHooks.after_context_created(context)\nAfter the KedroContext is created, the config loader is modified to include the pattern tdda. This will load tdda specification that match the regex pattern. Subsequently, constraints specifications are saved for furhter use with dataset hooks.\n\n\n\nhooks.TddaHooks.after_dataset_loaded(dataset_name, data)\nThis dataset hook will run tdda verify on each dataset that has a constraint specification",
    "crumbs": [
      "Hooks",
      "TddaHooks"
    ]
  },
  {
    "objectID": "reference/cli.discover.html",
    "href": "reference/cli.discover.html",
    "title": "cli.discover",
    "section": "",
    "text": "cli.discover\ncli.discover(dataset_name, env, overwrite)\nThe tdda discover command generates constraints for data, and saves the generated constraints as a yaml file."
  },
  {
    "objectID": "reference/cli.verify.html",
    "href": "reference/cli.verify.html",
    "title": "cli.verify",
    "section": "",
    "text": "cli.verify\ncli.verify(dataset_name, env)\nThe tdda verify command is used to validate pandas dataframes, against a constraints specification."
  }
]